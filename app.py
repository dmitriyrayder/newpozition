import streamlit as st
import pandas as pd
import numpy as np
from catboost import CatBoostRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score
import optuna

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Optuna, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –∫–æ–Ω—Å–æ–ª—å
optuna.logging.set_verbosity(optuna.logging.WARNING)

st.set_page_config(page_title="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–æ–≤", layout="wide")

st.title("üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–æ—Ä –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
dataset_file = st.file_uploader("\U0001F4C2 –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö", type=["csv"])

# --- –õ–æ–≥–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def process_data_and_train(uploaded_file):
    try:
        df = pd.read_csv(uploaded_file, parse_dates=['Datasales'])
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return None, None, None, None, None

    # 1. –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ê–ì–†–ï–ì–ê–¶–ò–Ø –î–ê–ù–ù–´–•
    st.info("–®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –ø–µ—Ä–≤—ã–µ 30 –¥–Ω–µ–π...")
    
    df = df.dropna(subset=['Qty', 'Art', 'Magazin'])
    df = df.sort_values(by=['Art', 'Magazin', 'Datasales'])

    # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã (–¢–æ–≤–∞—Ä, –ú–∞–≥–∞–∑–∏–Ω)
    first_sale_dates = df.groupby(['Art', 'Magazin'])['Datasales'].first().reset_index()
    first_sale_dates.rename(columns={'Datasales': 'first_sale_date'}, inplace=True)

    df = pd.merge(df, first_sale_dates, on=['Art', 'Magazin'])
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π —Å –ø–µ—Ä–≤–æ–π –ø—Ä–æ–¥–∞–∂–∏
    df_30_days = df[df['Datasales'] <= (df['first_sale_date'] + pd.Timedelta(days=30))].copy()

    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –Ω–∞ –ø–∞—Ä—É (–¢–æ–≤–∞—Ä, –ú–∞–≥–∞–∑–∏–Ω)
    agg_logic = {
        'Qty': 'sum', 'Sum': 'sum', 'Price': 'mean',
        'Model': 'first', 'brand': 'first', 'Segment': 'first',
        'color': 'first', 'formaoprav': 'first', 'Sex': 'first',
        'Metal-Plastic': 'first'
    }
    df_agg = df_30_days.groupby(['Art', 'Magazin'], as_index=False).agg(agg_logic)
    df_agg.rename(columns={'Qty': 'Qty_30_days'}, inplace=True)
    
    if df_agg.empty:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞.")
        return None, None, None, None, None

    # 2. –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–†–ò–ó–ù–ê–ö–û–í –ò –¶–ï–õ–ò
    target = 'Qty_30_days'
    # 'Art' –∏ 'Model' —É–±—Ä–∞–Ω—ã –∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ ID. 'Magazin' - –∫–ª—é—á–µ–≤–æ–π –ø—Ä–∏–∑–Ω–∞–∫!
    cat_features = ['Magazin', 'brand', 'Segment', 'color', 'formaoprav', 'Sex', 'Metal-Plastic']
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    drop_cols = ['Sum', 'Art', 'Model'] 
    
    # –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    df_agg = df_agg.drop(columns=drop_cols, errors='ignore')
    features = [col for col in df_agg.columns if col != target]
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–º–µ—é—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø
    for col in cat_features:
        if col in df_agg.columns:
            df_agg[col] = df_agg[col].astype(str)

    X = df_agg[features]
    y = df_agg[target]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

    # 3. –ê–í–¢–û–ü–û–î–ë–û–† –ü–ê–†–ê–ú–ï–¢–†–û–í —Å OPTUNA
    st.info("–®–∞–≥ 2: –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏ —Å –ø–æ–º–æ—â—å—é Optuna...")
    
    def objective(trial):
        params = {
            'iterations': 1000,
            'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.3),
            'depth': trial.suggest_int('depth', 4, 10),
            'l2_leaf_reg': trial.suggest_float('l2_leaf_reg', 1e-3, 10.0, log=True),
            'random_strength': trial.suggest_float('random_strength', 1e-3, 10.0, log=True),
            'bagging_temperature': trial.suggest_float('bagging_temperature', 0.0, 1.0),
            'border_count': trial.suggest_int('border_count', 32, 255),
            'verbose': 0,
            'random_seed': 42
        }
        
        model = CatBoostRegressor(**params)
        # –û–±—É—á–∞–µ–º –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º—Å—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π
        model.fit(X_train, y_train, cat_features=cat_features, eval_set=(X_test, y_test), early_stopping_rounds=50, use_best_model=True)
        preds = model.predict(X_test)
        mae = mean_absolute_error(y_test, preds)
        return mae

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    study = optuna.create_study(direction='minimize')
    study.optimize(objective, n_trials=30) # 30 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏, –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 50-100
    
    best_params = study.best_params
    st.success(f"–õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–π–¥–µ–Ω—ã: {best_params}")

    # 4. –û–ë–£–ß–ï–ù–ò–ï –§–ò–ù–ê–õ–¨–ù–û–ô –ú–û–î–ï–õ–ò
    st.info("–®–∞–≥ 3: –û–±—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö...")
    final_model = CatBoostRegressor(**best_params, iterations=1500, verbose=0, random_seed=42)
    final_model.fit(X, y, cat_features=cat_features) # –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö

    # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–µ
    test_preds = final_model.predict(X_test)
    final_mae = mean_absolute_error(y_test, test_preds)
    final_r2 = r2_score(y_test, test_preds)

    metrics = {'MAE': final_mae, 'R2': final_r2}

    return final_model, df_agg, features, cat_features, metrics


# --- –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ Streamlit ---
if dataset_file:
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å
    model, df_agg, features, cat_features, metrics = process_data_and_train(dataset_file)

    if model:
        st.header("üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏")
        col1, col2 = st.columns(2)
        col1.metric("–°—Ä–µ–¥–Ω—è—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (MAE)", f"{metrics['MAE']:.2f} —à—Ç.")
        col2.metric("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–µ—Ç–µ—Ä–º–∏–Ω–∞—Ü–∏–∏ (R¬≤)", f"{metrics['R2']:.2%}")
        st.caption("MAE –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω–∞ —Å–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –≤ —Å—Ä–µ–¥–Ω–µ–º –æ—à–∏–±–∞–µ—Ç—Å—è –ø—Ä–æ–≥–Ω–æ–∑. R¬≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫—É—é –¥–æ–ª—é –¥–∏—Å–ø–µ—Ä—Å–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—ä—è—Å–Ω—è–µ—Ç –º–æ–¥–µ–ª—å.")

        st.header("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
        with st.form("product_form"):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º text_input –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–≤–æ–¥–∏—Ç—å –Ω–µ–≤–∏–¥–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏—è
            col1, col2 = st.columns(2)
            with col1:
                brand = st.text_input("Brand (–±—Ä–µ–Ω–¥)", help="–ù–∞–ø—Ä–∏–º–µ—Ä, Ray-Ban")
                forma = st.text_input("Forma oprav (—Ñ–æ—Ä–º–∞ –æ–ø—Ä–∞–≤—ã)", help="–ù–∞–ø—Ä–∏–º–µ—Ä, –ê–≤–∏–∞—Ç–æ—Ä")
                sex = st.selectbox("Sex (–ø–æ–ª)", df_agg['Sex'].unique())
                price = st.number_input("Price (—Ü–µ–Ω–∞)", min_value=0.0, step=100.0, format="%.2f")
            
            with col2:
                segment = st.selectbox("Segment (—Å–µ–≥–º–µ–Ω—Ç)", df_agg['Segment'].unique())
                color = st.text_input("Color (—Ü–≤–µ—Ç)", help="–ù–∞–ø—Ä–∏–º–µ—Ä, –ß–µ—Ä–Ω—ã–π")
                material = st.selectbox("Metal-Plastic (–º–∞—Ç–µ—Ä–∏–∞–ª)", df_agg['Metal-Plastic'].unique())
            
            submitted = st.form_submit_button("üöÄ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

        if submitted:
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            magaziny = df_agg['Magazin'].unique()
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
            new_product_data = {
                'brand': brand,
                'Segment': segment,
                'color': color,
                'formaoprav': forma,
                'Sex': sex,
                'Metal-Plastic': material,
                'Price': price
            }

            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
            recs_list = []
            for magazin in magaziny:
                row = new_product_data.copy()
                row['Magazin'] = magazin
                recs_list.append(row)
            
            recs_df = pd.DataFrame(recs_list)
            # –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∫–∞–∫ –≤ –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–µ
            recs_df = recs_df[features]

            # –î–µ–ª–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            recs_df['Pred_Qty_30_days'] = model.predict(recs_df).round(0)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
            max_pred = recs_df['Pred_Qty_30_days'].max()
            if max_pred > 0:
                recs_df['Rating_%'] = (recs_df['Pred_Qty_30_days'] / max_pred * 100).round(0)
            else:
                recs_df['Rating_%'] = 0

            top_magaziny = recs_df.sort_values(by='Pred_Qty_30_days', ascending=False).reset_index(drop=True)
            
            # –£–±–∏—Ä–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            top_magaziny['Pred_Qty_30_days'] = top_magaziny['Pred_Qty_30_days'].apply(lambda x: max(0, x))

            st.subheader("\U0001F4C8 –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞")
            st.table(top_magaziny[['Magazin', 'Pred_Qty_30_days', 'Rating_%']].rename(columns={
                'Magazin': '–ú–∞–≥–∞–∑–∏–Ω',
                'Pred_Qty_30_days': '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ (30 –¥–Ω–µ–π, —à—Ç.)',
                'Rating_%': '–†–µ–π—Ç–∏–Ω–≥ (%)'
            }))
else:
    st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")