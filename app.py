import streamlit as st
import pandas as pd
import numpy as np
import re
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score
import warnings
warnings.filterwarnings('ignore')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üíñ –ú–æ–¥–Ω—ã–π –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –ü—Ä–æ–¥–∞–∂–∞–º",
    page_icon="üï∂Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
.main-header {
    font-size: 2.5rem;
    color: #e74c3c;
    text-align: center;
    margin-bottom: 2rem;
    font-weight: bold;
}
.metric-card {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 1rem;
    border-radius: 10px;
    color: white;
    text-align: center;
    margin: 0.5rem 0;
}
.recommendation-card {
    border: 2px solid #e74c3c;
    border-radius: 10px;
    padding: 1rem;
    margin: 0.5rem 0;
    background: #f8f9fa;
}
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown('<h1 class="main-header">üíñ –ú–æ–¥–Ω—ã–π –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –ü—Ä–æ–¥–∞–∂–∞–º</h1>', unsafe_allow_html=True)
st.markdown("---")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
@st.cache_data
def auto_detect_column(columns, keywords):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
    for keyword in keywords:
        for i, col in enumerate(columns):
            if keyword.lower() in col.lower():
                return i
    return 0

def extract_features_from_description(descriptions):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è"""
    features = pd.DataFrame()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    gender_patterns = {
        '–ú—É–∂—Å–∫–∏–µ': r'(–º—É–∂|–º–µ–Ω|men|male)',
        '–ñ–µ–Ω—Å–∫–∏–µ': r'(–∂–µ–Ω|–∂–µ–Ω—Å–∫|women|female|lady)',
        '–£–Ω–∏—Å–µ–∫—Å': r'(—É–Ω–∏—Å–µ–∫—Å|unisex)'
    }
    
    material_patterns = {
        '–ú–µ—Ç–∞–ª–ª': r'(–º–µ—Ç–∞–ª–ª|metal|titanium|—Ç–∏—Ç–∞–Ω|steel|—Å—Ç–∞–ª—å)',
        '–ü–ª–∞—Å—Ç–∏–∫': r'(–ø–ª–∞—Å—Ç–∏–∫|plastic|acetate|–∞—Ü–µ—Ç–∞—Ç)',
        '–î–µ—Ä–µ–≤–æ': r'(–¥–µ—Ä–µ–≤|wood|–±–∞–º–±—É–∫|bamboo)',
        '–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π': r'(–∫–æ–º–±–∏–Ω|combo|mix)'
    }
    
    shape_patterns = {
        '–ê–≤–∏–∞—Ç–æ—Ä': r'(–∞–≤–∏–∞—Ç–æ—Ä|aviator|pilot)',
        '–í–∞–π—Ñ–∞—Ä–µ—Ä': r'(–≤–∞–π—Ñ–∞—Ä–µ—Ä|wayfarer)',
        '–ö—Ä—É–≥–ª—ã–µ': r'(–∫—Ä—É–≥|round|circle)',
        '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ': r'(–ø—Ä—è–º–æ—É–≥|rectangle|–∫–≤–∞–¥—Ä–∞—Ç)',
        '–ö–æ—à–∞—á–∏–π –≥–ª–∞–∑': r'(–∫–æ—à–∞—á|cat.eye|cat eye)',
        '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ': r'(—Å–ø–æ—Ä—Ç|sport|active)'
    }
    
    for desc in descriptions:
        if pd.isna(desc):
            continue
        desc_lower = str(desc).lower()
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–∞
        gender = '–£–Ω–∏—Å–µ–∫—Å'
        for g, pattern in gender_patterns.items():
            if re.search(pattern, desc_lower):
                gender = g
                break
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        material = '–î—Ä—É–≥–æ–π'
        for m, pattern in material_patterns.items():
            if re.search(pattern, desc_lower):
                material = m
                break
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
        shape = '–î—Ä—É–≥–∞—è'
        for s, pattern in shape_patterns.items():
            if re.search(pattern, desc_lower):
                shape = s
                break
    
    return features

def validate_data_quality(df, selected_columns):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
    quality_report = {}
    
    for col_name, col in selected_columns.items():
        if col in df.columns:
            missing_pct = df[col].isnull().sum() / len(df) * 100
            quality_report[col_name] = {
                'missing_percentage': missing_pct,
                'unique_values': df[col].nunique(),
                'data_type': str(df[col].dtype)
            }
    
    return quality_report

def create_store_profiles(df, store_col, features_cols):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –º–∞–≥–∞–∑–∏–Ω–æ–≤"""
    profiles = {}
    
    for store in df[store_col].unique():
        store_data = df[df[store_col] == store]
        profile = {
            'total_sales': len(store_data),
            'avg_price': store_data['price'].mean() if 'price' in store_data.columns else 0,
            'popular_categories': {}
        }
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for feature in features_cols:
            if feature in store_data.columns:
                top_category = store_data[feature].mode()
                if len(top_category) > 0:
                    profile['popular_categories'][feature] = top_category.iloc[0]
        
        profiles[store] = profile
    
    return profiles

def train_recommendation_model(df, target_col, feature_cols):
    """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    X = df[feature_cols].copy()
    y = df[target_col]
    
    # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    label_encoders = {}
    for col in X.columns:
        if X[col].dtype == 'object':
            le = LabelEncoder()
            X[col] = le.fit_transform(X[col].astype(str))
            label_encoders[col] = le
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    y_pred = model.predict(X_test)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    
    return model, label_encoders, {'MAE': mae, 'R2': r2}

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
with st.sidebar:
    st.header("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö",
        type=['csv', 'xlsx', 'xls'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: CSV, Excel"
    )
    
    if uploaded_file is not None:
        st.success("‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if uploaded_file is not None:
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    try:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)
        
        st.success(f"üìä –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        with st.expander("üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö"):
            st.dataframe(df.head())
        
        # –ë–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        st.subheader("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–∞—Ç–∞—Å–µ—Ç–∞")
        
        available_columns = df.columns.tolist()
        
        col1, col2 = st.columns(2)
        
        with col1:
            col_magazin = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –ú–ê–ì–ê–ó–ò–ù:",
                options=available_columns,
                index=auto_detect_column(available_columns, ['magazin', '–º–∞–≥–∞–∑–∏–Ω', 'store', 'shop'])
            )
            
            col_date = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –î–ê–¢–ê –ü–†–û–î–ê–ñ–ò:",
                options=available_columns,
                index=auto_detect_column(available_columns, ['datasales', '–¥–∞—Ç–∞', 'date', '–¥–µ–Ω—å'])
            )
            
            col_art = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –ê–†–¢–ò–ö–£–õ:",
                options=available_columns,
                index=auto_detect_column(available_columns, ['art', '–∞—Ä—Ç–∏–∫—É–ª', 'sku', '–∫–æ–¥'])
            )
        
        with col2:
            col_price = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¶–ï–ù–ê:",
                options=available_columns,
                index=auto_detect_column(available_columns, ['price', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', 'cost'])
            )
            
            col_qty = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –ö–û–õ–ò–ß–ï–°–¢–í–û:",
                options=available_columns,
                index=auto_detect_column(available_columns, ['qty', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–∫–æ–ª-–≤–æ', 'quantity'])
            )
            
            col_describe = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –û–ü–ò–°–ê–ù–ò–ï –¢–û–í–ê–†–ê:",
                options=available_columns + ["–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"],
                index=auto_detect_column(available_columns, ['describe', '–æ–ø–∏—Å–∞–Ω–∏–µ', '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', 'name'])
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        selected_columns = {
            '–º–∞–≥–∞–∑–∏–Ω': col_magazin,
            '–¥–∞—Ç–∞': col_date,
            '–∞—Ä—Ç–∏–∫—É–ª': col_art,
            '—Ü–µ–Ω–∞': col_price,
            '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': col_qty
        }
        
        with st.expander("üìã –û—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö"):
            try:
                # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏
                quality_data = []
                for col_name, col in selected_columns.items():
                    if col in df.columns:
                        missing_pct = df[col].isnull().sum() / len(df) * 100
                        unique_vals = df[col].nunique()
                        data_type = str(df[col].dtype)
                        
                        quality_data.append({
                            '–ö–æ–ª–æ–Ω–∫–∞': col_name.upper(),
                            '–ü—Ä–æ–ø—É—Å–∫–∏ (%)': f"{missing_pct:.1f}%",
                            '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è': unique_vals,
                            '–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö': data_type
                        })
                
                if quality_data:
                    quality_df = pd.DataFrame(quality_data)
                    quality_df = quality_df.set_index('–ö–æ–ª–æ–Ω–∫–∞')
                    st.dataframe(quality_df, use_container_width=True)
                else:
                    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö")
                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                st.write("**–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö:**")
                st.write(f"- –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {len(df)}")
                st.write(f"- –í—Å–µ–≥–æ –∫–æ–ª–æ–Ω–æ–∫: {len(df.columns)}")
                st.write(f"- –ö–æ–ª–æ–Ω–∫–∏: {', '.join(df.columns.tolist())}")
        
        # –ë–ª–æ–∫ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        st.subheader("üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_df = df.copy()
        analysis_df.rename(columns={
            col_magazin: 'store',
            col_date: 'date',
            col_art: 'article',
            col_price: 'price',
            col_qty: 'quantity'
        }, inplace=True)
        
        # –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        col1, col2 = st.columns(2)
        
        with col1:
            gender_source = st.radio("üë§ –ü–æ–ª —Ç–æ–≤–∞—Ä–∞:", 
                                   ["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏", "–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É", "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"])
            
            if gender_source == "–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É":
                gender_column = st.selectbox("–ö–æ–ª–æ–Ω–∫–∞ —Å –ø–æ–ª–æ–º:", available_columns)
                analysis_df['gender'] = df[gender_column]
            
            material_source = st.radio("üîß –ú–∞—Ç–µ—Ä–∏–∞–ª –æ–ø—Ä–∞–≤—ã:", 
                                     ["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏", "–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É", "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"])
            
            if material_source == "–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É":
                material_column = st.selectbox("–ö–æ–ª–æ–Ω–∫–∞ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º:", available_columns)
                analysis_df['material'] = df[material_column]
        
        with col2:
            shape_source = st.radio("üï∂Ô∏è –§–æ—Ä–º–∞ –æ–ø—Ä–∞–≤—ã:", 
                                   ["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏", "–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É", "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"])
            
            if shape_source == "–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É":
                shape_column = st.selectbox("–ö–æ–ª–æ–Ω–∫–∞ —Å —Ñ–æ—Ä–º–æ–π:", available_columns)
                analysis_df['shape'] = df[shape_column]
            
            brand_source = st.radio("üè∑Ô∏è –ë—Ä–µ–Ω–¥:", 
                                   ["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏", "–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É", "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"])
            
            if brand_source == "–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É":
                brand_column = st.selectbox("–ö–æ–ª–æ–Ω–∫–∞ —Å –±—Ä–µ–Ω–¥–æ–º:", available_columns)
                analysis_df['brand'] = df[brand_column]
        
        # –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤
        if st.button("üìä –°–û–ó–î–ê–¢–¨ –ü–†–û–§–ò–õ–ò –ú–ê–ì–ê–ó–ò–ù–û–í", type="secondary"):
            with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –º–∞–≥–∞–∑–∏–Ω–æ–≤..."):
                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
                store_stats = analysis_df.groupby('store').agg({
                    'quantity': ['sum', 'mean', 'count'],
                    'price': ['mean', 'min', 'max']
                }).round(2)
                
                store_stats.columns = ['–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏', '–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π', 
                                     '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞', '–ú–∏–Ω —Ü–µ–Ω–∞', '–ú–∞–∫—Å —Ü–µ–Ω–∞']
                
                st.subheader("üè™ –ü—Ä–æ—Ñ–∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤")
                st.dataframe(store_stats, use_container_width=True)
                
                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                fig = px.scatter(store_stats, 
                               x='–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞', 
                               y='–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏',
                               size='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π',
                               hover_data=['–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏'],
                               title="–ö–∞—Ä—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤: –¶–µ–Ω–∞ vs –ü—Ä–æ–¥–∞–∂–∏")
                st.plotly_chart(fig, use_container_width=True)
        
        st.markdown("---")
        
        # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        st.subheader("üÜï –í–≤–µ–¥–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏")
        
        col1, col2 = st.columns(2)
        
        with col1:
            new_price = st.number_input("üí∞ –¶–µ–Ω–∞ –º–æ–¥–µ–ª–∏:", min_value=0, step=100, value=5000)
            
            new_gender = st.selectbox("üë§ –ü–æ–ª:", ["–ú—É–∂—Å–∫–∏–µ", "–ñ–µ–Ω—Å–∫–∏–µ", "–£–Ω–∏—Å–µ–∫—Å"])
            
            new_material = st.selectbox("üîß –ú–∞—Ç–µ—Ä–∏–∞–ª –æ–ø—Ä–∞–≤—ã:", 
                                      ["–ú–µ—Ç–∞–ª–ª", "–ü–ª–∞—Å—Ç–∏–∫", "–î–µ—Ä–µ–≤–æ", "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "–î—Ä—É–≥–æ–π"])
            
            new_shape = st.selectbox("üï∂Ô∏è –§–æ—Ä–º–∞ –æ–ø—Ä–∞–≤—ã:", 
                                   ["–ê–≤–∏–∞—Ç–æ—Ä", "–í–∞–π—Ñ–∞—Ä–µ—Ä", "–ö—Ä—É–≥–ª—ã–µ", "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ", 
                                    "–ö–æ—à–∞—á–∏–π –≥–ª–∞–∑", "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ", "–î—Ä—É–≥–∞—è"])
        
        with col2:
            new_brand = st.selectbox("üè∑Ô∏è –ë—Ä–µ–Ω–¥:", 
                                   ["Ray-Ban", "Oakley", "Gucci", "Prada", "Dolce&Gabbana", 
                                    "Polaroid", "Hugo Boss", "–î—Ä—É–≥–æ–π"])
            
            new_lens_color = st.selectbox("üé® –¶–≤–µ—Ç –ª–∏–Ω–∑:", 
                                        ["–ß–µ—Ä–Ω—ã–π", "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π", "–ó–µ–ª–µ–Ω—ã–π", "–°–∏–Ω–∏–π", 
                                         "–ó–µ—Ä–∫–∞–ª—å–Ω—ã–π", "–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π", "–î—Ä—É–≥–æ–π"])
            
            new_polarized = st.checkbox("‚ö° –ü–æ–ª—è—Ä–∏–∑–∞—Ü–∏—è")
            
            new_uv_protection = st.checkbox("üõ°Ô∏è UV –∑–∞—â–∏—Ç–∞")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
        with st.expander("üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"):
            st.write("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ –≤–∞—à–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Å–Ω–æ–≤–Ω—ã–µ
            used_columns = [col_magazin, col_date, col_art, col_price, col_qty]
            if col_describe != "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å":
                used_columns.append(col_describe)
            
            additional_columns = [col for col in available_columns if col not in used_columns]
            
            if additional_columns:
                col1, col2 = st.columns(2)
                
                with col1:
                    additional_feature_1 = st.selectbox(
                        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ 1:",
                        options=["–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"] + additional_columns,
                        help="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –∏–∑ –≤–∞—à–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞"
                    )
                    
                    if additional_feature_1 != "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å":
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
                        try:
                            unique_values_1 = df[additional_feature_1].dropna().unique()
                            if len(unique_values_1) > 10:
                                unique_values_1 = unique_values_1[:10]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                            unique_values_1 = [str(val) for val in unique_values_1]  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫–∏
                            new_additional_1 = st.selectbox(
                                f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{additional_feature_1}':",
                                options=unique_values_1
                            )
                        except Exception as e:
                            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ '{additional_feature_1}'")
                
                with col2:
                    additional_feature_2 = st.selectbox(
                        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ 2:",
                        options=["–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"] + additional_columns,
                        help="–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –∫–æ–ª–æ–Ω–∫—É –∏–∑ –≤–∞—à–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞"
                    )
                    
                    if additional_feature_2 != "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å":
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
                        try:
                            unique_values_2 = df[additional_feature_2].dropna().unique()
                            if len(unique_values_2) > 10:
                                unique_values_2 = unique_values_2[:10]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                            unique_values_2 = [str(val) for val in unique_values_2]  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫–∏
                            new_additional_2 = st.selectbox(
                                f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{additional_feature_2}':",
                                options=unique_values_2
                            )
                        except Exception as e:
                            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ '{additional_feature_2}'")
                
                # –¢—Ä–µ—Ç—å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞
                if len(additional_columns) > 2:
                    additional_feature_3 = st.selectbox(
                        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ 3:",
                        options=["–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"] + additional_columns,
                        help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ—Ç—å—é –∫–æ–ª–æ–Ω–∫—É –∏–∑ –≤–∞—à–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞"
                    )
                    
                    if additional_feature_3 != "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å":
                        try:
                            unique_values_3 = df[additional_feature_3].dropna().unique()
                            if len(unique_values_3) > 10:
                                unique_values_3 = unique_values_3[:10]
                            unique_values_3 = [str(val) for val in unique_values_3]  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç—Ä–æ–∫–∏
                            new_additional_3 = st.selectbox(
                                f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{additional_feature_3}':",
                                options=unique_values_3
                            )
                        except Exception as e:
                            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ '{additional_feature_3}'")
            else:
                st.info("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö.")
# –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if st.button("üéØ –ü–û–î–û–ë–†–ê–¢–¨ –ú–ê–ì–ê–ó–ò–ù–´", type="primary"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π..."):
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                stores = analysis_df['store'].unique()
                recommendations = []
                
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º
                def calculate_feature_compatibility(store_data, new_features):
                    """–†–∞—Å—á–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º —Ç–æ–≤–∞—Ä–∞"""
                    compatibility_scores = {}
                    
                    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ —Ü–µ–Ω–µ (30% –≤–µ—Å–∞)
                    if not store_data.empty and 'price' in store_data.columns:
                        avg_store_price = store_data['price'].mean()
                        price_diff = abs(new_features['price'] - avg_store_price) / avg_store_price
                        compatibility_scores['price'] = max(0.2, 1 - min(price_diff, 1.0))
                    else:
                        compatibility_scores['price'] = 0.5
                    
                    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –ø–æ–ª—É (25% –≤–µ—Å–∞)
                    gender_compatibility = 0.5  # –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    if 'gender' in store_data.columns:
                        gender_counts = store_data['gender'].value_counts()
                        if new_features['gender'] in gender_counts.index:
                            # –î–æ–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
                            gender_share = gender_counts[new_features['gender']] / len(store_data)
                            gender_compatibility = min(1.0, gender_share * 2)  # —É—Å–∏–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–∏–º–æ—Å—Ç—å
                        elif '–£–Ω–∏—Å–µ–∫—Å' in gender_counts.index:
                            gender_compatibility = 0.7  # —É–Ω–∏—Å–µ–∫—Å –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö
                    compatibility_scores['gender'] = gender_compatibility
                    
                    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É (25% –≤–µ—Å–∞)
                    material_compatibility = 0.5
                    if 'material' in store_data.columns:
                        material_counts = store_data['material'].value_counts()
                        if new_features['material'] in material_counts.index:
                            material_share = material_counts[new_features['material']] / len(store_data)
                            material_compatibility = min(1.0, material_share * 1.5)
                    compatibility_scores['material'] = material_compatibility
                    
                    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ —Ñ–æ—Ä–º–µ (20% –≤–µ—Å–∞)
                    shape_compatibility = 0.5
                    if 'shape' in store_data.columns:
                        shape_counts = store_data['shape'].value_counts()
                        if new_features['shape'] in shape_counts.index:
                            shape_share = shape_counts[new_features['shape']] / len(store_data)
                            shape_compatibility = min(1.0, shape_share * 1.5)
                    compatibility_scores['shape'] = shape_compatibility
                    
                    return compatibility_scores
                
                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É
                def calculate_segment_forecast(store_data, new_features, compatibility_scores):
                    """–†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–æ–¥–∞–∂ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–≥–º–µ–Ω—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
                    
                    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω–∞
                    base_monthly_sales = store_data['quantity'].sum() if not store_data.empty else 10
                    
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ—Ö–æ–∂–∏–º —Ç–æ–≤–∞—Ä–∞–º (—Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è)
                    similar_items = store_data.copy()
                    
                    # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ (¬±30% –æ—Ç –Ω–æ–≤–æ–π —Ü–µ–Ω—ã)
                    price_range = new_features['price'] * 0.3
                    similar_items = similar_items[
                        (similar_items['price'] >= new_features['price'] - price_range) &
                        (similar_items['price'] <= new_features['price'] + price_range)
                    ]
                    
                    # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
                    if 'gender' in similar_items.columns:
                        similar_items = similar_items[
                            (similar_items['gender'] == new_features['gender']) |
                            (similar_items['gender'] == '–£–Ω–∏—Å–µ–∫—Å')
                        ]
                    
                    # –§–∏–ª—å—Ç—Ä –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
                    if 'material' in similar_items.columns:
                        similar_items = similar_items[
                            similar_items['material'] == new_features['material']
                        ]
                    
                    # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–≥–º–µ–Ω—Ç–∞
                    if not similar_items.empty:
                        # –°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
                        segment_avg_sales = similar_items['quantity'].mean()
                        segment_count = len(similar_items['article'].unique())
                        
                        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Ä–∞–∑–º–µ—Ä —Å–µ–≥–º–µ–Ω—Ç–∞
                        segment_multiplier = min(2.0, segment_count / 5)  # —á–µ–º –±–æ–ª—å—à–µ —Å–µ–≥–º–µ–Ω—Ç, —Ç–µ–º –ª—É—á—à–µ
                        
                        # –ü—Ä–æ–≥–Ω–æ–∑ = —Å—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ * –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä * —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                        predicted_sales = segment_avg_sales * segment_multiplier
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –º–∞–≥–∞–∑–∏–Ω–∞
                        unique_articles = store_data['article'].nunique() if not store_data.empty else 1
                        predicted_sales = base_monthly_sales / max(1, unique_articles)
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–±—â–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    overall_compatibility = (
                        compatibility_scores['price'] * 0.30 +
                        compatibility_scores['gender'] * 0.25 +
                        compatibility_scores['material'] * 0.25 +
                        compatibility_scores['shape'] * 0.20
                    )
                    
                    final_forecast = predicted_sales * overall_compatibility
                    
                    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ - 5 —à—Ç—É–∫ –≤ –º–µ—Å—è—Ü –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
                    return max(5, final_forecast)
                
                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤–æ–º —Ç–æ–≤–∞—Ä–µ
                new_features = {
                    'price': new_price,
                    'gender': new_gender,
                    'material': new_material,
                    'shape': new_shape
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã –∏–∑ –∫–æ–ª–æ–Ω–æ–∫)
                if gender_source == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏" and 'gender' not in analysis_df.columns:
                    # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                    np.random.seed(42)
                    genders = ['–ú—É–∂—Å–∫–∏–µ', '–ñ–µ–Ω—Å–∫–∏–µ', '–£–Ω–∏—Å–µ–∫—Å']
                    analysis_df['gender'] = np.random.choice(genders, size=len(analysis_df))
                
                if material_source == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏" and 'material' not in analysis_df.columns:
                    materials = ['–ú–µ—Ç–∞–ª–ª', '–ü–ª–∞—Å—Ç–∏–∫', '–î–µ—Ä–µ–≤–æ', '–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π']
                    analysis_df['material'] = np.random.choice(materials, size=len(analysis_df))
                
                if shape_source == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏" and 'shape' not in analysis_df.columns:
                    shapes = ['–ê–≤–∏–∞—Ç–æ—Ä', '–í–∞–π—Ñ–∞—Ä–µ—Ä', '–ö—Ä—É–≥–ª—ã–µ', '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ', '–ö–æ—à–∞—á–∏–π –≥–ª–∞–∑', '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ']
                    analysis_df['shape'] = np.random.choice(shapes, size=len(analysis_df))
                
                # –†–∞—Å—á–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
                for store in stores:
                    store_data = analysis_df[analysis_df['store'] == store]
                    
                    # –†–∞—Å—á–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
                    compatibility_scores = calculate_feature_compatibility(store_data, new_features)
                    
                    # –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–æ–¥–∞–∂
                    predicted_sales = calculate_segment_forecast(store_data, new_features, compatibility_scores)
                    
                    # –û–±—â–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                    overall_compatibility = (
                        compatibility_scores['price'] * 0.30 +
                        compatibility_scores['gender'] * 0.25 +
                        compatibility_scores['material'] * 0.25 +
                        compatibility_scores['shape'] * 0.20
                    )
                    
                    recommendations.append({
                        'store': store,
                        'predicted_sales': predicted_sales,
                        'compatibility': overall_compatibility,
                        'price_compatibility': compatibility_scores['price'],
                        'gender_compatibility': compatibility_scores['gender'],
                        'material_compatibility': compatibility_scores['material'],
                        'shape_compatibility': compatibility_scores['shape'],
                        'avg_price': store_data['price'].mean() if not store_data.empty else new_price,
                        'total_items': len(store_data),
                        'unique_articles': store_data['article'].nunique() if not store_data.empty else 0
                    })
                
                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ–≥–Ω–æ–∑—É –ø—Ä–æ–¥–∞–∂
                recommendations.sort(key=lambda x: x['predicted_sales'], reverse=True)
                
                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.subheader("üèÜ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã")
                
                # –¢–û–ü-10 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                top_recommendations = recommendations[:min(10, len(recommendations))]
                
                for i, rec in enumerate(top_recommendations):
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                    if rec['compatibility'] >= 0.8:
                        status = "üü¢ –û—Ç–ª–∏—á–Ω–æ"
                        status_color = "success"
                    elif rec['compatibility'] >= 0.6:
                        status = "üü° –•–æ—Ä–æ—à–æ"
                        status_color = "warning"
                    else:
                        status = "üî¥ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
                        status_color = "error"
                    
                    with st.expander(f"#{i+1} {rec['store']} - {status} - –ü—Ä–æ–≥–Ω–æ–∑: {rec['predicted_sales']:.0f} —à—Ç/–º–µ—Å—è—Ü"):
                        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                        col1, col2, col3, col4 = st.columns(4)
                        
                        with col1:
                            st.metric("üìà –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂", f"{rec['predicted_sales']:.0f} —à—Ç/–º–µ—Å")
                        with col2:
                            st.metric("üéØ –û–±—â–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", f"{rec['compatibility']:.1%}")
                        with col3:
                            st.metric("üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{rec['avg_price']:.0f} ‚ÇΩ")
                        with col4:
                            st.metric("üì¶ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", f"{rec['unique_articles']}")
                        
                        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        st.write("**–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:**")
                        compatibility_details = pd.DataFrame({
                            '–ö—Ä–∏—Ç–µ—Ä–∏–π': ['üí∞ –¶–µ–Ω–∞ (30%)', 'üë§ –ü–æ–ª (25%)', 'üîß –ú–∞—Ç–µ—Ä–∏–∞–ª (25%)', 'üï∂Ô∏è –§–æ—Ä–º–∞ (20%)'],
                            '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å': [
                                f"{rec['price_compatibility']:.1%}",
                                f"{rec['gender_compatibility']:.1%}",
                                f"{rec['material_compatibility']:.1%}",
                                f"{rec['shape_compatibility']:.1%}"
                            ],
                            '–û—Ü–µ–Ω–∫–∞': [
                                "–û—Ç–ª–∏—á–Ω–æ" if rec['price_compatibility'] >= 0.8 else "–•–æ—Ä–æ—à–æ" if rec['price_compatibility'] >= 0.6 else "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ",
                                "–û—Ç–ª–∏—á–Ω–æ" if rec['gender_compatibility'] >= 0.8 else "–•–æ—Ä–æ—à–æ" if rec['gender_compatibility'] >= 0.6 else "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ",
                                "–û—Ç–ª–∏—á–Ω–æ" if rec['material_compatibility'] >= 0.8 else "–•–æ—Ä–æ—à–æ" if rec['material_compatibility'] >= 0.6 else "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ",
                                "–û—Ç–ª–∏—á–Ω–æ" if rec['shape_compatibility'] >= 0.8 else "–•–æ—Ä–æ—à–æ" if rec['shape_compatibility'] >= 0.6 else "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
                            ]
                        })
                        st.dataframe(compatibility_details, use_container_width=True, hide_index=True)
                        
                        # –ü—Ä–∏—á–∏–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                        reasons = []
                        if rec['price_compatibility'] > 0.8:
                            reasons.append("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ —Ü–µ–Ω–µ")
                        if rec['gender_compatibility'] > 0.8:
                            reasons.append("‚úÖ –í—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª —Ç–æ–≤–∞—Ä–∞")
                        if rec['material_compatibility'] > 0.8:
                            reasons.append("‚úÖ –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
                        if rec['shape_compatibility'] > 0.8:
                            reasons.append("‚úÖ –í–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ–ø—Ä–∞–≤—ã")
                        if rec['unique_articles'] > 50:
                            reasons.append("‚úÖ –ë–æ–ª—å—à–æ–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤")
                        if rec['predicted_sales'] > np.mean([r['predicted_sales'] for r in recommendations]):
                            reasons.append("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –ø–æ —Å–µ—Ç–∏")
                        
                        if reasons:
                            st.write("**–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:**")
                            for reason in reasons:
                                st.write(reason)
                        
                        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
                        improvements = []
                        if rec['price_compatibility'] < 0.6:
                            improvements.append("üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É —Ü–µ–Ω—ã –ø–æ–¥ —Ü–µ–Ω–æ–≤–æ–π —Å–µ–≥–º–µ–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–∞")
                        if rec['gender_compatibility'] < 0.6:
                            improvements.append("üí° –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å —É–Ω–∏—Å–µ–∫—Å –≤–∞—Ä–∏–∞–Ω—Ç")
                        if rec['material_compatibility'] < 0.6:
                            improvements.append("üí° –ú–∞—Ç–µ—Ä–∏–∞–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø–æ–ø—É–ª—è—Ä–µ–Ω –≤ –¥–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ")
                        
                        if improvements:
                            st.write("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:**")
                            for improvement in improvements:
                                st.write(improvement)
                
                # –ê–Ω—Ç–∏—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                if len(recommendations) > 5:
                    st.subheader("‚ùå –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è")
                    worst_recommendations = recommendations[-3:]
                    
                    for rec in worst_recommendations:
                        st.error(f"**{rec['store']}** - –ù–∏–∑–∫–∏–π –ø—Ä–æ–≥–Ω–æ–∑: {rec['predicted_sales']:.0f} —à—Ç/–º–µ—Å—è—Ü "
                               f"(—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {rec['compatibility']:.1%})")
                        
                        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
                        problems = []
                        if rec['price_compatibility'] < 0.4:
                            problems.append("üî¥ –ù–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ —Ü–µ–Ω–µ")
                        if rec['gender_compatibility'] < 0.4:
                            problems.append("üî¥ –ù–∏–∑–∫–∏–π —Å–ø—Ä–æ—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –ø–æ–ª —Ç–æ–≤–∞—Ä–∞")
                        if rec['material_compatibility'] < 0.4:
                            problems.append("üî¥ –ù–µ–ø–æ–ø—É–ª—è—Ä–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª")
                        if rec['shape_compatibility'] < 0.4:
                            problems.append("üî¥ –ù–µ–≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞")
                        
                        if problems:
                            st.write("–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: " + ", ".join(problems))
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
                st.subheader("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞")
                
                total_predicted = sum([r['predicted_sales'] for r in recommendations])
                avg_compatibility = np.mean([r['compatibility'] for r in recommendations])
                best_compatibility = max([r['compatibility'] for r in recommendations])
                
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("–û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑", f"{total_predicted:.0f} —à—Ç/–º–µ—Å—è—Ü")
                with col2:
                    st.metric("–°—Ä–µ–¥–Ω—è—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", f"{avg_compatibility:.1%}")
                with col3:
                    st.metric("–õ—É—á—à–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", f"{best_compatibility:.1%}")
                with col4:
                    st.metric("–ú–∞–≥–∞–∑–∏–Ω–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", len(recommendations))
                
                # –î–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                st.subheader("üìà –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
                
                # –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–¥–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã —Ç–æ–ø-5 –º–∞–≥–∞–∑–∏–Ω–æ–≤
                top_5 = recommendations[:5]
                criteria = ['–¶–µ–Ω–∞', '–ü–æ–ª', '–ú–∞—Ç–µ—Ä–∏–∞–ª', '–§–æ—Ä–º–∞']
                
                fig = go.Figure()
                
                for i, rec in enumerate(top_5):
                    values = [
                        rec['price_compatibility'],
                        rec['gender_compatibility'], 
                        rec['material_compatibility'],
                        rec['shape_compatibility']
                    ]
                    
                    fig.add_trace(go.Scatterpolar(
                        r=values,
                        theta=criteria,
                        fill='toself',
                        name=f"{rec['store']} ({rec['predicted_sales']:.0f} —à—Ç)",
                        opacity=0.6
                    ))
                
                fig.update_layout(
                    polar=dict(
                        radialaxis=dict(
                            visible=True,
                            range=[0, 1]
                        )),
                    showlegend=True,
                    title="–ü—Ä–æ—Ñ–∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–æ–ø-5 –º–∞–≥–∞–∑–∏–Ω–æ–≤"
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
                rec_df = pd.DataFrame(recommendations)
                fig2 = px.scatter(rec_df, 
                               x='compatibility', 
                               y='predicted_sales',
                               size='unique_articles',
                               hover_name='store',
                               title="–ö–∞—Ä—Ç–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤: –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å vs –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂",
                               labels={
                                   'compatibility': '–û–±—â–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å',
                                   'predicted_sales': '–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂, —à—Ç/–º–µ—Å—è—Ü',
                                   'unique_articles': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤'
                               })
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –∑–æ–Ω—ã
                fig2.add_hline(y=np.mean(rec_df['predicted_sales']), 
                             line_dash="dash", 
                             annotation_text="–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑")
                fig2.add_vline(x=0.6, 
                             line_dash="dash", 
                             annotation_text="–ú–∏–Ω. —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
                
                st.plotly_chart(fig2, use_container_width=True)
    
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.")

else:
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    st.info("üëà –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    
    st.subheader("üìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
    
    steps = [
        "**–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª** —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö (CSV –∏–ª–∏ Excel)",
        "**–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–ª–æ–Ω–∫–∏** - —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è",
        "**–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤** —Ç–æ–≤–∞—Ä–æ–≤ (–∏–∑ –∫–æ–ª–æ–Ω–æ–∫ –∏–ª–∏ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥)",
        "**–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤** –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫",
        "**–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏** –æ—á–∫–æ–≤",
        "**–ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** –ø–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö"
    ]
    
    for i, step in enumerate(steps, 1):
        st.write(f"{i}. {step}")
    
    st.subheader("üìä –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º:")
    
    required_columns = {
        "–ú–∞–≥–∞–∑–∏–Ω": "–ù–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∫–æ–¥ –º–∞–≥–∞–∑–∏–Ω–∞",
        "–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏": "–î–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏",
        "–ê—Ä—Ç–∏–∫—É–ª": "–ö–æ–¥ —Ç–æ–≤–∞—Ä–∞",
        "–¶–µ–Ω–∞": "–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞",
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü",
        "–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"
    }
    
    for col, desc in required_columns.items():
        st.write(f"‚Ä¢ **{col}**: {desc}")
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üìã –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
    
    example_data = pd.DataFrame({
        '–ú–∞–≥–∞–∑–∏–Ω': ['–ú–∞–≥–∞–∑–∏–Ω –ê', '–ú–∞–≥–∞–∑–∏–Ω –ë', '–ú–∞–≥–∞–∑–∏–Ω –í'],
        '–î–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏': ['2024-01-15', '2024-01-16', '2024-01-17'],
        '–ê—Ä—Ç–∏–∫—É–ª': ['RB001', 'OK045', 'GU123'],
        '–¶–µ–Ω–∞': [15000, 8500, 25000],
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [2, 1, 1],
        '–û–ø–∏—Å–∞–Ω–∏–µ': ['Ray-Ban Aviator –ú—É–∂—Å–∫–∏–µ –ú–µ—Ç–∞–ª–ª', 'Oakley Sport –£–Ω–∏—Å–µ–∫—Å –ü–ª–∞—Å—Ç–∏–∫', 'Gucci Cat Eye –ñ–µ–Ω—Å–∫–∏–µ –ú–µ—Ç–∞–ª–ª']
    })
    
    st.dataframe(example_data, use_container_width=True)

# –§—É—Ç–µ—Ä
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666;'>
        üíñ –ú–æ–¥–Ω—ã–π –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –ü—Ä–æ–¥–∞–∂–∞–º | –°–æ–∑–¥–∞–Ω–æ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    </div>
    """, 
    unsafe_allow_html=True
)
