import streamlit as st
import pandas as pd
import numpy as np
from catboost import CatBoostRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, r2_score
import optuna
import plotly.express as px
import re

# ==============================================================================
# 1. –°–¢–†–£–ö–¢–£–†–ê –ò–ù–¢–ï–†–§–ï–ô–°–ê –ò –°–¢–ò–õ–ò
# ==============================================================================
st.set_page_config(page_title="–ú–æ–¥–Ω—ã–π –°–æ–≤–µ—Ç–Ω–∏–∫", layout="wide", initial_sidebar_state="expanded")

st.markdown("""
<style>
/* –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω –∏ —à—Ä–∏—Ñ—Ç—ã */
body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji"; }
.main { background-color: #f0f2f6; }
/* –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ */
.stButton>button {
    border-radius: 8px; border: 2px solid #ff4b4b; color: #ff4b4b;
    background-color: transparent; font-weight: bold; transition: all 0.3s;
}
.stButton>button:hover {
    border-color: #ff4b4b; color: white; background-color: #ff4b4b;
}
/* –°—Ç–∏–ª—å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ (type="primary") */
div[data-testid="stForm"] .stButton>button[kind="primary"] {
    border-color: #ff4b4b; color: white; background-color: #ff4b4b;
}
</style>
""", unsafe_allow_html=True)

# ==============================================================================
# 8. –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ß–ê–°–¢–¨: –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ==============================================================================

def auto_detect_column(columns, keywords, default_index=0):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º."""
    for keyword in keywords:
        for i, col in enumerate(columns):
            if keyword.lower() in col.lower():
                return i
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º default_index, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ –¥–ª–∏–Ω—ã —Å–ø–∏—Å–∫–∞
    return min(default_index, len(columns) - 1 if columns else 0)

def extract_features_from_description(descriptions):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è."""
    features = pd.DataFrame(index=descriptions.index)
    
    # –°–ª–æ–≤–∞—Ä—å: –∏–º—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ -> [–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞]
    extraction_map = {
        'brand_extracted': ['ray-ban', 'oakley', 'gucci', 'prada', 'polaroid'],
        'material_extracted': ['–º–µ—Ç–∞–ª–ª', '–ø–ª–∞—Å—Ç–∏–∫', '–¥–µ—Ä–µ–≤–æ', '–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'],
        'shape_extracted': ['–∞–≤–∏–∞—Ç–æ—Ä', '–≤–∞–π—Ñ–∞—Ä–µ—Ä', '–∫—Ä—É–≥–ª—ã–µ', '–∫–æ—à–∞—á–∏–π –≥–ª–∞–∑']
    }
    
    for feature_name, keywords in extraction_map.items():
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω RegEx, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–π–¥–µ—Ç –ª—é–±–æ–µ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        pattern = re.compile(f'({"|".join(keywords)})', re.IGNORECASE)
        features[feature_name] = descriptions.str.findall(pattern).str[0].str.lower().fillna('–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
        
    return features

@st.cache_data
def process_data_and_train(_df, column_map, feature_config):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏, –æ–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å.
    """
    df = _df.copy()
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    df.rename(columns={v: k for k, v in column_map.items() if v}, inplace=True)

    # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞
    df['date'] = pd.to_datetime(df['date'], errors='coerce')
    df.dropna(subset=['date', 'Art', 'Magazin', 'Qty', 'Price'], inplace=True)
    df['Price'] = pd.to_numeric(df['Price'], errors='coerce').fillna(0)
    df['Qty'] = pd.to_numeric(df['Qty'], errors='coerce').fillna(0)

    # 2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    all_features_df = pd.DataFrame(index=df.index)
    
    # 2.1 –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    if feature_config['describe_col'] != "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å":
        extracted = extract_features_from_description(df['Describe'])
        all_features_df = pd.concat([all_features_df, extracted], axis=1)

    # 2.2 –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    for feature, source_col in feature_config['manual_features'].items():
        if source_col and source_col in df.columns:
            all_features_df[feature] = df[source_col].astype(str).fillna('–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')

    # 3. –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    df_with_features = pd.concat([df[['Art', 'Magazin', 'date', 'Qty', 'Price']], all_features_df], axis=1)
    df_with_features = df_with_features.sort_values(by=['Art', 'Magazin', 'date'])
    first_sale_dates = df_with_features.groupby(['Art', 'Magazin'])['date'].first().reset_index(name='first_sale_date')
    df_merged = pd.merge(df_with_features, first_sale_dates, on=['Art', 'Magazin'])
    df_30_days = df_merged[df_merged['date'] <= (df_merged['first_sale_date'] + pd.Timedelta(days=30))].copy()

    agg_logic = {'Qty': 'sum', 'Price': 'mean'}
    feature_cols = [col for col in all_features_df.columns if col in df_30_days.columns]
    for col in feature_cols:
        agg_logic[col] = 'first'
    
    df_agg = df_30_days.groupby(['Art', 'Magazin'], as_index=False).agg(agg_logic)
    df_agg.rename(columns={'Qty': 'Qty_30_days'}, inplace=True)

    # 4. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    if len(df_agg) < 50: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        return None, None, None, "–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏."

    target = 'Qty_30_days'
    cat_features_to_use = ['Magazin'] + feature_cols
    features_to_use = ['Price'] + cat_features_to_use
    
    X = df_agg[features_to_use]
    y = df_agg[target]
    
    for col in cat_features_to_use:
        X[col] = X[col].astype(str)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # Optuna
    def objective(trial):
        params = {
            'iterations': 500, 'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.2),
            'depth': trial.suggest_int('depth', 4, 8), 'verbose': 0, 'random_seed': 42
        }
        model = CatBoostRegressor(**params)
        model.fit(X_train, y_train, cat_features=cat_features_to_use, eval_set=(X_test, y_test), early_stopping_rounds=30, use_best_model=True)
        return mean_absolute_error(y_test, model.predict(X_test))

    study = optuna.create_study(direction='minimize')
    with st.spinner("–û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –º–æ–¥–µ–ª—å..."):
        study.optimize(objective, n_trials=20)
    
    final_model = CatBoostRegressor(**study.best_params, iterations=1000, verbose=0, random_seed=42)
    final_model.fit(X, y, cat_features=cat_features_to_use)
    
    metrics = {
        'MAE': mean_absolute_error(y_test, final_model.predict(X_test)),
        'R2': r2_score(y_test, final_model.predict(X_test))
    }
    
    return final_model, features_to_use, metrics, None

# ==============================================================================
# –û–°–ù–û–í–ù–û–ô –ö–û–î –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ==============================================================================

st.title("üíñ –ú–æ–¥–Ω—ã–π –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –ü—Ä–æ–¥–∞–∂–∞–º")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
if 'step' not in st.session_state:
    st.session_state.step = 1

# --- –ë–ª–æ–∫ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ ---
with st.sidebar:
    st.header("1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel –∏–ª–∏ CSV", type=["csv", "xlsx", "xls"])

    if uploaded_file:
        try:
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file)
            else:
                df = pd.read_excel(uploaded_file)
            st.session_state.df_raw = df
            st.success("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            st.stop()
    
if 'df_raw' in st.session_state:
    df_raw = st.session_state.df_raw
    available_columns = df_raw.columns.tolist()

    # --- –ë–ª–æ–∫ 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ ---
    st.header("2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞")
    with st.form("column_mapping_form"):
        st.subheader("üéØ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫")
        st.caption("–ü–æ–º–æ–≥–∏—Ç–µ –º–Ω–µ –ø–æ–Ω—è—Ç—å, –≥–¥–µ –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è. –Ø –ø–æ–ø—Ä–æ–±—É—é —É–≥–∞–¥–∞—Ç—å —Å–∞–º–∞!")
        c1, c2 = st.columns(2)
        with c1:
            col_magazin = st.selectbox("–ö–æ–ª–æ–Ω–∫–∞ –ú–ê–ì–ê–ó–ò–ù:", available_columns, index=auto_detect_column(available_columns, ['magazin', '–º–∞–≥–∞–∑–∏–Ω', 'store']))
            col_art = st.selectbox("–ö–æ–ª–æ–Ω–∫–∞ –ê–†–¢–ò–ö–£–õ:", available_columns, index=auto_detect_column(available_columns, ['art', '–∞—Ä—Ç–∏–∫—É–ª', 'sku'], 1))
            col_qty = st.selectbox("–ö–æ–ª–æ–Ω–∫–∞ –ö–û–õ–ò–ß–ï–°–¢–í–û:", available_columns, index=auto_detect_column(available_columns, ['qty', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'], 2))
        with c2:
            col_date = st.selectbox("–ö–æ–ª–æ–Ω–∫–∞ –î–ê–¢–ê –ü–†–û–î–ê–ñ–ò:", available_columns, index=auto_detect_column(available_columns, ['datasales', '–¥–∞—Ç–∞'], 3))
            col_price = st.selectbox("–ö–æ–ª–æ–Ω–∫–∞ –¶–ï–ù–ê:", available_columns, index=auto_detect_column(available_columns, ['price', '—Ü–µ–Ω–∞'], 4))
            col_describe = st.selectbox("–ö–æ–ª–æ–Ω–∫–∞ –û–ü–ò–°–ê–ù–ò–ï –¢–û–í–ê–†–ê:", available_columns + ["–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"], index=auto_detect_column(available_columns, ['describe', '–æ–ø–∏—Å–∞–Ω–∏–µ'], 5))

        # --- –ë–ª–æ–∫ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ---
        st.subheader("‚úã –†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞")
        st.caption("–ö–∞–∫–∏–µ –µ—â–µ –∫–æ–ª–æ–Ω–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ë—Ä–µ–Ω–¥, –¶–≤–µ—Ç, –ü–æ–ª)")
        other_feature_cols = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏-–ø—Ä–∏–∑–Ω–∞–∫–∏:",
            [c for c in available_columns if c not in [col_magazin, col_art, col_qty, col_date, col_price, col_describe]]
        )
        
        submitted = st.form_submit_button("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", type="primary")

    if submitted:
        st.session_state.step = 2
        column_map = {'Magazin': col_magazin, 'Art': col_art, 'date': col_date, 'Qty': col_qty, 'Price': col_price}
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_config = {
            'describe_col': col_describe,
            'manual_features': {col: col for col in other_feature_cols}
        }

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –æ–±—É—á–µ–Ω–∏–µ
        model, features, metrics, error_msg = process_data_and_train(df_raw, column_map, feature_config)

        if error_msg:
            st.error(error_msg)
            st.stop()
            
        st.session_state.model = model
        st.session_state.features = features
        st.session_state.metrics = metrics
        st.session_state.df_agg = df_agg # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        st.session_state.feature_config = feature_config # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–≤–æ–¥–∞

# --- –ë–ª–æ–∫ 4, 5, 6: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è ---
if st.session_state.step == 2:
    st.header("3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è")
    metrics = st.session_state.metrics
    c1, c2 = st.columns(2)
    c1.metric("–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ (MAE)", f"{metrics['MAE']:.2f} —à—Ç.")
    c2.metric("–¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ (R¬≤)", f"{metrics['R2']:.2%}")

    # --- 7. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞: –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ ---
    feature_importance_df = pd.DataFrame({
        'feature': st.session_state.features,
        'importance': st.session_state.model.get_feature_importance()
    }).sort_values('importance', ascending=False)

    fig = px.bar(feature_importance_df, x='importance', y='feature', orientation='h', title='–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏')
    st.plotly_chart(fig, use_container_width=True)

    st.header("4. –í–≤–æ–¥ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    with st.form("prediction_form"):
        st.subheader("üÜï –í–≤–µ–¥–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏")
        new_product_data = {}
        c1, c2 = st.columns(2)
        
        with c1:
            new_product_data['Price'] = st.number_input("üí∞ –¶–µ–Ω–∞ –º–æ–¥–µ–ª–∏:", min_value=0.0, step=100.0)
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        manual_features_to_input = list(st.session_state.feature_config['manual_features'].keys())
        for i, feature in enumerate(manual_features_to_input):
            with c1 if i % 2 == 0 else c2:
                new_product_data[feature] = st.text_input(f"üîπ {feature}:")
                
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –∞–≤—Ç–æ-–∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        if st.session_state.feature_config['describe_col'] != "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å":
            st.info("–¢–∞–∫ –∫–∞–∫ –º–æ–¥–µ–ª—å —É—á–∏–ª–∞—Å—å –Ω–∞ –∞–≤—Ç–æ-–ø—Ä–∏–∑–Ω–∞–∫–∞—Ö –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é:")
            with c2:
                new_product_data['brand_extracted'] = st.text_input("üè∑Ô∏è –ë—Ä–µ–Ω–¥ (–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è):")
                new_product_data['material_extracted'] = st.text_input("üîß –ú–∞—Ç–µ—Ä–∏–∞–ª (–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è):")
                new_product_data['shape_extracted'] = st.text_input("üï∂Ô∏è –§–æ—Ä–º–∞ (–∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è):")
        
        predict_button = st.form_submit_button("üéØ –ü–û–î–û–ë–†–ê–¢–¨ –ú–ê–ì–ê–ó–ò–ù–´", type="primary")

    if predict_button:
        # --- 6. –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π ---
        model = st.session_state.model
        features = st.session_state.features
        all_stores = st.session_state.df_agg['Magazin'].unique()
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        prediction_df = pd.DataFrame(columns=features)
        for store in all_stores:
            row = new_product_data.copy()
            row['Magazin'] = store
            prediction_df.loc[len(prediction_df)] = row

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã –∫–∞–∫ –≤ –æ–±—É—á–µ–Ω–∏–∏
        for col in prediction_df.columns:
            if col in model.get_cat_feature_indices():
                prediction_df[col] = prediction_df[col].astype(str)
            else:
                 prediction_df[col] = pd.to_numeric(prediction_df[col], errors='coerce').fillna(0)

        predictions = model.predict(prediction_df[features])
        prediction_df['prediction'] = np.maximum(0, predictions)
        
        max_pred = prediction_df['prediction'].max()
        prediction_df['compatibility'] = (prediction_df['prediction'] / max_pred * 100) if max_pred > 0 else 0
        
        results = prediction_df.sort_values('prediction', ascending=False)
        
        st.subheader("üèÜ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã")
        for i, row in results.head(5).iterrows():
            with st.expander(f"**#{i+1} {row['Magazin']}** - –ü—Ä–æ–≥–Ω–æ–∑: **{row['prediction']:.0f} —à—Ç/–º–µ—Å**"):
                c1, c2 = st.columns(2)
                c1.metric("–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂", f"{row['prediction']:.0f} —à—Ç")
                c2.metric("–ò–Ω–¥–µ–∫—Å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏", f"{row['compatibility']:.0f}%")
        
        st.subheader("‚ùå –ú–µ–Ω–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–∞–≥–∞–∑–∏–Ω—ã")
        for i, row in results.tail(3).iterrows():
             st.markdown(f"- **{row['Magazin']}**: –ü—Ä–æ–≥–Ω–æ–∑ ~{row['prediction']:.0f} —à—Ç/–º–µ—Å. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –ª—É—á—à–∏–π –≤—ã–±–æ—Ä.")
