import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ —Å—Ç–∏–ª–∏
st.set_page_config(page_title="üíñ –ú–æ–¥–Ω—ã–π –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –ü—Ä–æ–¥–∞–∂–∞–º", page_icon="üï∂Ô∏è", layout="wide")
st.markdown("""<style>
.main-header {font-size: 2.5rem; color: #e74c3c; text-align: center; margin-bottom: 2rem; font-weight: bold;}
.metric-card {background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 1rem; border-radius: 10px; color: white; text-align: center; margin: 0.5rem 0;}
.profile-card {background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); padding: 1rem; border-radius: 10px; color: white; margin-bottom: 1rem;}
</style>""", unsafe_allow_html=True)

st.markdown('<h1 class="main-header">üíñ –ú–æ–¥–Ω—ã–π –°–æ–≤–µ—Ç–Ω–∏–∫ –ø–æ –ü—Ä–æ–¥–∞–∂–∞–º</h1>', unsafe_allow_html=True)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
@st.cache_data
def auto_detect_column(columns, keywords):
    for keyword in keywords:
        for i, col in enumerate(columns):
            if keyword.lower() in col.lower():
                return i
    return 0

def create_synthetic_features(df, feature_configs):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    np.random.seed(42)
    feature_options = {
        'gender': ['–ú—É–∂—Å–∫–∏–µ', '–ñ–µ–Ω—Å–∫–∏–µ', '–£–Ω–∏—Å–µ–∫—Å'],
        'material': ['–ú–µ—Ç–∞–ª–ª', '–ü–ª–∞—Å—Ç–∏–∫', '–î–µ—Ä–µ–≤–æ', '–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'],
        'shape': ['–ê–≤–∏–∞—Ç–æ—Ä', '–í–∞–π—Ñ–∞—Ä–µ—Ä', '–ö—Ä—É–≥–ª—ã–µ', '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ', '–ö–æ—à–∞—á–∏–π –≥–ª–∞–∑', '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ'],
        'brand': ['Ray-Ban', 'Oakley', 'Gucci', 'Prada', '–î—Ä—É–≥–æ–π'],
        'segment': ['–≠–∫–æ–Ω–æ–º', '–°—Ä–µ–¥–Ω–∏–π', '–ü—Ä–µ–º–∏—É–º', '–õ—é–∫—Å']
    }
    
    for feature, config in feature_configs.items():
        if config['source'] == "–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏" and feature not in df.columns:
            df[feature] = np.random.choice(feature_options.get(feature, ['–î—Ä—É–≥–æ–µ']), size=len(df))
        elif config['source'] == "–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É" and 'column' in config:
            df[feature] = df[config['column']]
    
    return df

class RecommendationEngine:
    def __init__(self, df, new_features, feature_weights=None):
        self.df = df
        self.new_features = new_features
        self.weights = feature_weights or {'price': 0.25, 'gender': 0.20, 'material': 0.20, 'shape': 0.20, 'segment': 0.15}
        self.stores = df['store'].unique()
    
    def calculate_compatibility(self, store_data):
        """–†–∞—Å—á–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º"""
        scores = {}
        
        # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ —Ü–µ–Ω–µ
        if not store_data.empty and 'price' in store_data.columns:
            avg_price = store_data['price'].mean()
            price_diff = abs(self.new_features['price'] - avg_price) / max(avg_price, 1)
            scores['price'] = max(0.2, 1 - min(price_diff, 1.0))
        else:
            scores['price'] = 0.5
        
        # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
        for feature in ['gender', 'material', 'shape', 'brand', 'segment']:
            if feature in self.new_features and feature in store_data.columns:
                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–£—á–∏—Ç—ã–≤–∞—Ç—å –≤—Å–µ", —Å—Ç–∞–≤–∏–º –≤—ã—Å–æ–∫—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                if self.new_features[feature] == "–£—á–∏—Ç—ã–≤–∞—Ç—å –≤—Å–µ":
                    scores[feature] = 0.9
                else:
                    feature_counts = store_data[feature].value_counts()
                    if self.new_features[feature] in feature_counts.index:
                        share = feature_counts[self.new_features[feature]] / len(store_data)
                        scores[feature] = min(1.0, share * 2)
                    else:
                        scores[feature] = 0.3
            else:
                scores[feature] = 0.5
        
        return scores
    
    def calculate_profile_sales(self, store_data):
        """–†–∞—Å—á–µ—Ç —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º"""
        if store_data.empty:
            return 0, 0
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º
        similar_items = store_data.copy()
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ (¬±30% –æ—Ç —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã)
        price_range = self.new_features['price'] * 0.3
        similar_items = similar_items[
            (similar_items['price'] >= self.new_features['price'] - price_range) &
            (similar_items['price'] <= self.new_features['price'] + price_range)
        ]
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
        for feature in ['gender', 'material', 'shape', 'brand', 'segment']:
            if feature in self.new_features and feature in similar_items.columns:
                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–£—á–∏—Ç—ã–≤–∞—Ç—å –≤—Å–µ", –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —ç—Ç–æ–º—É –ø—Ä–∏–∑–Ω–∞–∫—É
                if self.new_features[feature] == "–£—á–∏—Ç—ã–≤–∞—Ç—å –≤—Å–µ":
                    continue
                elif feature == 'gender' and self.new_features[feature] == '–£–Ω–∏—Å–µ–∫—Å':
                    # –î–ª—è —É–Ω–∏—Å–µ–∫—Å –≤–∫–ª—é—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    continue
                elif feature == 'gender':
                    # –î–ª—è –º—É–∂—Å–∫–∏—Ö/–∂–µ–Ω—Å–∫–∏—Ö –≤–∫–ª—é—á–∞–µ–º —Ç–∞–∫–∂–µ —É–Ω–∏—Å–µ–∫—Å
                    similar_items = similar_items[
                        (similar_items[feature] == self.new_features[feature]) |
                        (similar_items[feature] == '–£–Ω–∏—Å–µ–∫—Å')
                    ]
                else:
                    similar_items = similar_items[similar_items[feature] == self.new_features[feature]]
        
        total_sales = similar_items['quantity'].sum() if not similar_items.empty else 0
        unique_articles = similar_items['article'].nunique() if not similar_items.empty else 0
        
        return total_sales, unique_articles
    
    def predict_sales(self, store_data, compatibility_scores):
        """–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ–≥–º–µ–Ω—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        if store_data.empty:
            return 10
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö
        profile_sales, profile_articles = self.calculate_profile_sales(store_data)
        
        if profile_sales > 0 and profile_articles > 0:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            predicted = profile_sales / profile_articles
        else:
            # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞–≥–∞–∑–∏–Ω–∞
            unique_articles = store_data['article'].nunique()
            predicted = store_data['quantity'].sum() / max(1, unique_articles)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        overall_compatibility = sum(compatibility_scores[k] * self.weights.get(k, 0) 
                                  for k in compatibility_scores.keys())
        
        return max(5, predicted * overall_compatibility)
    
    def generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤"""
        recommendations = []
        
        for store in self.stores:
            store_data = self.df[self.df['store'] == store]
            compatibility_scores = self.calculate_compatibility(store_data)
            predicted_sales = self.predict_sales(store_data, compatibility_scores)
            profile_sales, profile_articles = self.calculate_profile_sales(store_data)
            
            overall_compatibility = sum(compatibility_scores[k] * self.weights.get(k, 0) 
                                      for k in compatibility_scores.keys())
            
            recommendations.append({
                'store': store,
                'predicted_sales': predicted_sales,
                'compatibility': overall_compatibility,
                'scores': compatibility_scores,
                'avg_price': store_data['price'].mean() if not store_data.empty else self.new_features['price'],
                'total_items': len(store_data),
                'unique_articles': store_data['article'].nunique() if not store_data.empty else 0,
                'profile_sales': profile_sales,
                'profile_articles': profile_articles
            })
        
        return sorted(recommendations, key=lambda x: x['predicted_sales'], reverse=True)

def display_model_profile(new_features):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏"""
    st.markdown('<div class="profile-card">', unsafe_allow_html=True)
    st.markdown("### üéØ –ü—Ä–æ—Ñ–∏–ª—å –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown(f"**üí∞ –¶–µ–Ω–∞:** {new_features['price']:,} ‚ÇΩ")
        st.markdown(f"**üë§ –ü–æ–ª:** {new_features['gender']}")
    with col2:
        st.markdown(f"**üîß –ú–∞—Ç–µ—Ä–∏–∞–ª:** {new_features['material']}")
        st.markdown(f"**üï∂Ô∏è –§–æ—Ä–º–∞:** {new_features['shape']}")
    with col3:
        st.markdown(f"**üè∑Ô∏è –ë—Ä–µ–Ω–¥:** {new_features['brand']}")
        st.markdown(f"**üíé –°–µ–≥–º–µ–Ω—Ç:** {new_features['segment']}")
    
    st.markdown('</div>', unsafe_allow_html=True)

def display_recommendations(recommendations, new_features):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –º–æ–¥–µ–ª–∏
    display_model_profile(new_features)
    
    st.subheader("üèÜ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã")
    
    # –¢–æ–ø-10 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    top_recs = recommendations[:min(10, len(recommendations))]
    
    for i, rec in enumerate(top_recs):
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if rec['compatibility'] >= 0.8:
            status, color = "üü¢ –û—Ç–ª–∏—á–Ω–æ", "success"
        elif rec['compatibility'] >= 0.6:
            status, color = "üü° –•–æ—Ä–æ—à–æ", "warning"
        else:
            status, color = "üî¥ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", "error"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–∞—Ö
        profile_info = ""
        if rec['profile_sales'] > 0:
            profile_info = f" | –ü—Ä–æ–¥–∞–∂–∏ –ø–æ—Ö–æ–∂–∏—Ö: {rec['profile_sales']:.0f} —à—Ç ({rec['profile_articles']} —Ç–æ–≤–∞—Ä–æ–≤)"
        
        with st.expander(f"#{i+1} {rec['store']} - {status} - –ü—Ä–æ–≥–Ω–æ–∑: {rec['predicted_sales']:.0f} —à—Ç/–º–µ—Å—è—Ü{profile_info}"):
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏
            col1, col2, col3, col4, col5 = st.columns(5)
            with col1: st.metric("üìà –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂", f"{rec['predicted_sales']:.0f} —à—Ç/–º–µ—Å")
            with col2: st.metric("üéØ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", f"{rec['compatibility']:.1%}")
            with col3: st.metric("üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{rec['avg_price']:.0f} ‚ÇΩ")
            with col4: st.metric("üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤", f"{rec['unique_articles']}")
            with col5: st.metric("üé™ –ü–æ—Ö–æ–∂–∏–µ –ø—Ä–æ–¥–∞–∂–∏", f"{rec['profile_sales']:.0f} —à—Ç")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ —Ç–æ–≤–∞—Ä–æ–≤
            if rec['profile_sales'] > 0:
                st.success(f"‚úÖ –í –º–∞–≥–∞–∑–∏–Ω–µ —É–∂–µ –ø—Ä–æ–¥–∞–µ—Ç—Å—è {rec['profile_articles']} —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º –æ–±—â–∏–º –æ–±—ä–µ–º–æ–º {rec['profile_sales']:.0f} —à—Ç—É–∫")
            else:
                st.warning("‚ö†Ô∏è –í –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ç–æ—á–Ω–æ —Ç–∞–∫–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º, –ø—Ä–æ–≥–Ω–æ–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ")
            
            # –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
            st.markdown("**üéØ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ñ–∏–ª—é –º–æ–¥–µ–ª–∏:**")
            criteria_map = {'price': 'üí∞ –¶–µ–Ω–∞', 'gender': 'üë§ –ü–æ–ª', 'material': 'üîß –ú–∞—Ç–µ—Ä–∏–∞–ª', 
                          'shape': 'üï∂Ô∏è –§–æ—Ä–º–∞', 'brand': 'üè∑Ô∏è –ë—Ä–µ–Ω–¥', 'segment': 'üíé –°–µ–≥–º–µ–Ω—Ç'}
            
            compatibility_data = []
            for criterion, score in rec['scores'].items():
                if criterion in new_features:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
                    profile_value = new_features[criterion]
                    if criterion == 'price':
                        profile_value = f"{profile_value:,} ‚ÇΩ"
                    
                    compatibility_data.append({
                        '–ö—Ä–∏—Ç–µ—Ä–∏–π': criteria_map.get(criterion, criterion),
                        '–ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è': profile_value,
                        '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å': f"{score:.1%}",
                        '–û—Ü–µ–Ω–∫–∞': "–û—Ç–ª–∏—á–Ω–æ" if score >= 0.8 else "–•–æ—Ä–æ—à–æ" if score >= 0.6 else "–°–ª–∞–±–æ"
                    })
            
            if compatibility_data:
                st.dataframe(pd.DataFrame(compatibility_data), use_container_width=True, hide_index=True)
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            reasons = []
            warnings = []
            
            for criterion, score in rec['scores'].items():
                if criterion in new_features:
                    if score > 0.7:
                        if criterion == 'price':
                            reasons.append("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ —Ü–µ–Ω–µ —Å –∞—Å—Å–æ—Ä—Çiment–æ–º –º–∞–≥–∞–∑–∏–Ω–∞")
                        elif criterion == 'gender':
                            reasons.append(f"‚úÖ –í—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–∞ {new_features['gender'].lower()} —Ç–æ–≤–∞—Ä—ã")
                        elif criterion == 'material':
                            reasons.append(f"‚úÖ –ü–æ–ø—É–ª—è—Ä–Ω—ã–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ –º–∞—Ç–µ—Ä–∏–∞–ª: {new_features['material']}")
                        elif criterion == 'shape':
                            reasons.append(f"‚úÖ –í–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω–∞—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ —Ñ–æ—Ä–º–∞: {new_features['shape']}")
                        elif criterion == 'brand':
                            reasons.append(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞—é—â–∏–π—Å—è –±—Ä–µ–Ω–¥: {new_features['brand']}")
                    elif score < 0.5:
                        if criterion == 'price':
                            warnings.append("‚ö†Ô∏è –¶–µ–Ω–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω–æ–≤–æ–º—É —Å–µ–≥–º–µ–Ω—Ç—É –º–∞–≥–∞–∑–∏–Ω–∞")
                        elif criterion == 'gender':
                            warnings.append(f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π —Å–ø—Ä–æ—Å –Ω–∞ {new_features['gender'].lower()} —Ç–æ–≤–∞—Ä—ã")
                        elif criterion == 'material':
                            warnings.append(f"‚ö†Ô∏è –ú–∞—Ç–µ—Ä–∏–∞–ª {new_features['material']} —Ä–µ–¥–∫–æ –ø–æ–∫—É–ø–∞—é—Ç –≤ —ç—Ç–æ–º –º–∞–≥–∞–∑–∏–Ω–µ")
                        elif criterion == 'shape':
                            warnings.append(f"‚ö†Ô∏è –§–æ—Ä–º–∞ {new_features['shape']} –Ω–µ –ø–æ–ø—É–ª—è—Ä–Ω–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
                        elif criterion == 'brand':
                            warnings.append(f"‚ö†Ô∏è –ë—Ä–µ–Ω–¥ {new_features['brand']} —Å–ª–∞–±–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω–µ")
            
            if rec['unique_articles'] > 50:
                reasons.append("‚úÖ –ë–æ–ª—å—à–æ–π –∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç")
            
            if reasons:
                st.write("**üí™ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è:**")
                for reason in reasons[:4]:
                    st.write(reason)
            
            if warnings:
                st.write("**‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏:**")
                for warning in warnings[:3]:
                    st.write(warning)

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
with st.sidebar:
    st.header("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏", type=['csv', 'xlsx', 'xls'])

if uploaded_file:
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = pd.read_csv(uploaded_file) if uploaded_file.name.endswith('.csv') else pd.read_excel(uploaded_file)
        st.success(f"üìä –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        st.subheader("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫")
        cols = df.columns.tolist()
        
        col1, col2 = st.columns(2)
        with col1:
            col_store = st.selectbox("–ú–∞–≥–∞–∑–∏–Ω:", cols, index=auto_detect_column(cols, ['magazin', '–º–∞–≥–∞–∑–∏–Ω', 'store']))
            col_date = st.selectbox("–î–∞—Ç–∞:", cols, index=auto_detect_column(cols, ['date', '–¥–∞—Ç–∞']))
            col_article = st.selectbox("–ê—Ä—Ç–∏–∫—É–ª:", cols, index=auto_detect_column(cols, ['art', '–∞—Ä—Ç–∏–∫—É–ª', 'sku']))
        with col2:
            col_price = st.selectbox("–¶–µ–Ω–∞:", cols, index=auto_detect_column(cols, ['price', '—Ü–µ–Ω–∞']))
            col_qty = st.selectbox("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:", cols, index=auto_detect_column(cols, ['qty', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']))
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
        analysis_df = df.rename(columns={
            col_store: 'store', col_date: 'date', col_article: 'article',
            col_price: 'price', col_qty: 'quantity'
        })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–ª–æ–Ω–∫–∏ store
        if 'store' not in analysis_df.columns:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ª–æ–Ω–∫—É —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫.")
            st.stop()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        st.subheader("üé® –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞")
        col1, col2 = st.columns(2)
        
        feature_configs = {}
        with col1:
            feature_configs['gender'] = {'source': st.radio("üë§ –ü–æ–ª:", ["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏", "–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É", "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"])}
            feature_configs['material'] = {'source': st.radio("üîß –ú–∞—Ç–µ—Ä–∏–∞–ª:", ["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏", "–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É", "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"])}
            feature_configs['segment'] = {'source': st.radio("üíé –°–µ–≥–º–µ–Ω—Ç:", ["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏", "–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É", "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"])}
        with col2:
            feature_configs['shape'] = {'source': st.radio("üï∂Ô∏è –§–æ—Ä–º–∞:", ["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏", "–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É", "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"])}
            feature_configs['brand'] = {'source': st.radio("üè∑Ô∏è –ë—Ä–µ–Ω–¥:", ["–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏", "–í—ã–±—Ä–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É", "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å"])}
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        analysis_df = create_synthetic_features(analysis_df, feature_configs)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
        unique_values = {}
        for feature in ['gender', 'material', 'shape', 'brand', 'segment']:
            if feature in analysis_df.columns:
                unique_values[feature] = sorted(analysis_df[feature].dropna().unique().tolist())
        
        # –í–≤–æ–¥ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        st.subheader("üÜï –í–≤–µ–¥–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏")
        col1, col2 = st.columns(2)
        
        new_features = {}
        with col1:
            new_features['price'] = st.number_input("üí∞ –¶–µ–Ω–∞:", min_value=0, step=100, value=5000)
            
            # –ü–æ–ª —Å –æ–ø—Ü–∏–µ–π "–£—á–∏—Ç—ã–≤–∞—Ç—å –≤—Å–µ"
            gender_options = ["–£—á–∏—Ç—ã–≤–∞—Ç—å –≤—Å–µ"] + unique_values.get('gender', ["–ú—É–∂—Å–∫–∏–µ", "–ñ–µ–Ω—Å–∫–∏–µ", "–£–Ω–∏—Å–µ–∫—Å"])
            new_features['gender'] = st.selectbox("üë§ –ü–æ–ª:", gender_options)
            
            # –ú–∞—Ç–µ—Ä–∏–∞–ª —Å –æ–ø—Ü–∏–µ–π "–£—á–∏—Ç—ã–≤–∞—Ç—å –≤—Å–µ"
            material_options = ["–£—á–∏—Ç—ã–≤–∞—Ç—å –≤—Å–µ"] + unique_values.get('material', ["–ú–µ—Ç–∞–ª–ª", "–ü–ª–∞—Å—Ç–∏–∫", "–î–µ—Ä–µ–≤–æ", "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"])
            new_features['material'] = st.selectbox("üîß –ú–∞—Ç–µ—Ä–∏–∞–ª:", material_options)
            
        with col2:
            # –§–æ—Ä–º–∞ —Å –æ–ø—Ü–∏–µ–π "–£—á–∏—Ç—ã–≤–∞—Ç—å –≤—Å–µ"
            shape_options = ["–£—á–∏—Ç—ã–≤–∞—Ç—å –≤—Å–µ"] + unique_values.get('shape', ["–ê–≤–∏–∞—Ç–æ—Ä", "–í–∞–π—Ñ–∞—Ä–µ—Ä", "–ö—Ä—É–≥–ª—ã–µ", "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ", "–ö–æ—à–∞—á–∏–π –≥–ª–∞–∑", "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ"])
            new_features['shape'] = st.selectbox("üï∂Ô∏è –§–æ—Ä–º–∞:", shape_options)
            
            new_features['brand'] = st.selectbox("üè∑Ô∏è –ë—Ä–µ–Ω–¥:", unique_values.get('brand', ["Ray-Ban", "Oakley", "Gucci", "Prada", "–î—Ä—É–≥–æ–π"]))
            
            # –°–µ–≥–º–µ–Ω—Ç —Å –æ–ø—Ü–∏–µ–π "–£—á–∏—Ç—ã–≤–∞—Ç—å –≤—Å–µ"
            segment_options = ["–£—á–∏—Ç—ã–≤–∞—Ç—å –≤—Å–µ"] + unique_values.get('segment', ["–≠–∫–æ–Ω–æ–º", "–°—Ä–µ–¥–Ω–∏–π", "–ü—Ä–µ–º–∏—É–º", "–õ—é–∫—Å"])
            new_features['segment'] = st.selectbox("üíé –°–µ–≥–º–µ–Ω—Ç:", segment_options)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        if st.button("üéØ –ü–û–î–û–ë–†–ê–¢–¨ –ú–ê–ì–ê–ó–ò–ù–´", type="primary"):
            with st.spinner("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤..."):
                engine = RecommendationEngine(analysis_df, new_features)
                recommendations = engine.generate_recommendations()
                display_recommendations(recommendations, new_features)
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                st.subheader("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –º–∞–≥–∞–∑–∏–Ω–∞–º")
                total_predicted = sum(r['predicted_sales'] for r in recommendations)
                avg_compatibility = np.mean([r['compatibility'] for r in recommendations])
                total_profile_sales = sum(r['profile_sales'] for r in recommendations)
                stores_with_profile = sum(1 for r in recommendations if r['profile_sales'] > 0)
                
                col1, col2, col3, col4 = st.columns(4)
                with col1: st.metric("–û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑", f"{total_predicted:.0f} —à—Ç/–º–µ—Å—è—Ü")
                with col2: st.metric("–°—Ä–µ–¥–Ω—è—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", f"{avg_compatibility:.1%}")
                with col3: st.metric("–ü—Ä–æ–¥–∞–∂–∏ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤", f"{total_profile_sales:.0f} —à—Ç")
                with col4: st.metric("–ú–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º", f"{stores_with_profile}/{len(recommendations)}")
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {str(e)}")
else:
    st.info("üëà –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    st.subheader("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
    steps = ["–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV/Excel —Ñ–∞–π–ª", "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–∞–Ω–Ω—ã—Ö", "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", 
             "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏", "–ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤"]
    for i, step in enumerate(steps, 1):
        st.write(f"{i}. {step}")
