import streamlit as st
import pandas as pd
import numpy as np
import re
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
from catboost import CatBoostRegressor
import warnings
warnings.filterwarnings('ignore')

def load_custom_css():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Å—Ç–∏–ª–µ–π"""
    st.markdown("""
    <style>
    .main > div {
        padding-top: 2rem;
    }
    .stApp {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    .block-container {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 15px;
        padding: 2rem;
        margin: 1rem;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }
    .metric-card {
        background: linear-gradient(135deg, #ff9a9e 0%, #fecfef 50%, #fecfef 100%);
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }
    .upload-section {
        background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
        padding: 2rem;
        border-radius: 15px;
        text-align: center;
        margin: 1rem 0;
    }
    </style>
    """, unsafe_allow_html=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üëì –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –æ—á–∫–æ–≤",
    page_icon="üëì",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π
load_custom_css()

class GlassesSalesPredictor:
    def __init__(self):
        self.model = None
        self.feature_columns = []
        self.categorical_features = []
        
    def extract_features_from_description(self, description):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        if pd.isna(description):
            description = ""
        
        desc_lower = description.lower()
        
        # –ú–∞—Ç–µ—Ä–∏–∞–ª –æ–ø—Ä–∞–≤—ã
        frame_material = '–î—Ä—É–≥–æ–µ'
        if any(word in desc_lower for word in ['–º–µ—Ç–∞–ª–ª', '–º–µ—Ç–∞–ª', 'steel', 'titanium']):
            frame_material = '–ú–µ—Ç–∞–ª–ª'
        elif any(word in desc_lower for word in ['–ø–ª–∞—Å—Ç–∏–∫', 'plastic', 'acetate']):
            frame_material = '–ü–ª–∞—Å—Ç–∏–∫'
        elif any(word in desc_lower for word in ['–¥–µ—Ä–µ–≤', 'wood', 'bamboo']):
            frame_material = '–î–µ—Ä–µ–≤–æ'
            
        # –§–æ—Ä–º–∞ –æ–ø—Ä–∞–≤—ã
        frame_shape = '–î—Ä—É–≥–æ–µ'
        if any(word in desc_lower for word in ['–∞–≤–∏–∞—Ç–æ—Ä', 'aviator', '–ø–∏–ª–æ—Ç']):
            frame_shape = '–ê–≤–∏–∞—Ç–æ—Ä'
        elif any(word in desc_lower for word in ['–≤–∞–π—Ñ–∞—Ä–µ—Ä', 'wayfarer']):
            frame_shape = '–í–∞–π—Ñ–∞—Ä–µ—Ä'
        elif any(word in desc_lower for word in ['–∫–æ—à–∞—á', 'cat eye']):
            frame_shape = '–ö–æ—à–∞—á–∏–π –≥–ª–∞–∑'
        elif any(word in desc_lower for word in ['–∫—Ä—É–≥', 'round']):
            frame_shape = '–ö—Ä—É–≥–ª—ã–µ'
        elif any(word in desc_lower for word in ['–ø—Ä—è–º–æ—É–≥', 'rectangle', '–∫–≤–∞–¥—Ä–∞—Ç']):
            frame_shape = '–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ'
        elif any(word in desc_lower for word in ['—Å–ø–æ—Ä—Ç', 'sport']):
            frame_shape = '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ'
            
        # –¶–≤–µ—Ç –ª–∏–Ω–∑
        lens_color = '–î—Ä—É–≥–æ–µ'
        if any(word in desc_lower for word in ['—á–µ—Ä–Ω', 'black']):
            lens_color = '–ß–µ—Ä–Ω—ã–π'
        elif any(word in desc_lower for word in ['–∫–æ—Ä–∏—á–Ω', 'brown']):
            lens_color = '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π'
        elif any(word in desc_lower for word in ['–∑–µ—Ä–∫–∞–ª', 'mirror', '—Å–µ—Ä–µ–±—Ä']):
            lens_color = '–ó–µ—Ä–∫–∞–ª—å–Ω—ã–π'
        elif any(word in desc_lower for word in ['–≥—Ä–∞–¥–∏–µ–Ω—Ç', 'gradient']):
            lens_color = '–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π'
        elif any(word in desc_lower for word in ['—Å–∏–Ω', 'blue']):
            lens_color = '–°–∏–Ω–∏–π'
        elif any(word in desc_lower for word in ['–∑–µ–ª–µ–Ω', 'green']):
            lens_color = '–ó–µ–ª–µ–Ω—ã–π'
            
        # –ü–æ–ª
        gender = '–£–Ω–∏—Å–µ–∫—Å'
        if any(word in desc_lower for word in ['–º—É–∂—Å–∫', 'men', 'male']):
            gender = '–ú—É–∂—Å–∫–∏–µ'
        elif any(word in desc_lower for word in ['–∂–µ–Ω—Å–∫', 'women', 'female']):
            gender = '–ñ–µ–Ω—Å–∫–∏–µ'
            
        # –ü–æ–ª—è—Ä–∏–∑–∞—Ü–∏—è –∏ UV –∑–∞—â–∏—Ç–∞
        is_polarized = 1 if any(word in desc_lower for word in ['–ø–æ–ª—è—Ä', 'polar']) else 0
        has_uv_protection = 1 if any(word in desc_lower for word in ['uv', '—É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç']) else 0
        
        return {
            'frame_material': frame_material,
            'frame_shape': frame_shape,
            'lens_color': lens_color,
            'gender': gender,
            'is_polarized': is_polarized,
            'has_uv_protection': has_uv_protection
        }
    
    def create_price_segment(self, price):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞"""
        if price < 2000:
            return '–≠–∫–æ–Ω–æ–º'
        elif price < 5000:
            return '–°—Ä–µ–¥–Ω–∏–π'
        else:
            return '–ü—Ä–µ–º–∏—É–º'
    
    def get_season(self, date):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ –ø–æ –¥–∞—Ç–µ"""
        month = date.month
        if month in [12, 1, 2]:
            return '–ó–∏–º–∞'
        elif month in [3, 4, 5]:
            return '–í–µ—Å–Ω–∞'
        elif month in [6, 7, 8]:
            return '–õ–µ—Ç–æ'
        else:
            return '–û—Å–µ–Ω—å'
    
    def prepare_training_data(self, df):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
            df['Datasales'] = pd.to_datetime(df['Datasales'])
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            features_from_desc = df['Describe'].apply(self.extract_features_from_description)
            features_df = pd.DataFrame(list(features_from_desc))
            
            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            df = pd.concat([df, features_df], axis=1)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            df['month'] = df['Datasales'].dt.month
            df['season'] = df['Datasales'].apply(self.get_season)
            df['day_of_week'] = df['Datasales'].dt.dayofweek
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            df['price_segment'] = df['Price'].apply(self.create_price_segment)
            
            # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º
            agg_data = []
            
            for art in df['Art'].unique():
                art_data = df[df['Art'] == art].sort_values('Datasales')
                
                if len(art_data) == 0:
                    continue
                    
                # –ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞ –ø—Ä–æ–¥–∞–∂–∏
                launch_date = art_data['Datasales'].min()
                
                # –ü—Ä–æ–¥–∞–∂–∏ –∑–∞ –ø–µ—Ä–≤—ã–µ 30 –¥–Ω–µ–π
                end_date = launch_date + timedelta(days=30)
                sales_30_days = art_data[
                    (art_data['Datasales'] >= launch_date) & 
                    (art_data['Datasales'] <= end_date)
                ]['Qty'].sum()
                
                # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
                first_record = art_data.iloc[0]
                
                agg_data.append({
                    'Art': art,
                    'Magazin': first_record['Magazin'],
                    'Model': first_record['Model'],
                    'Segment': first_record['Segment'],
                    'Price': first_record['Price'],
                    'frame_material': first_record['frame_material'],
                    'frame_shape': first_record['frame_shape'],
                    'lens_color': first_record['lens_color'],
                    'gender': first_record['gender'],
                    'is_polarized': first_record['is_polarized'],
                    'has_uv_protection': first_record['has_uv_protection'],
                    'price_segment': first_record['price_segment'],
                    'launch_season': self.get_season(launch_date),
                    'launch_month': launch_date.month,
                    'sales_30_days': sales_30_days
                })
            
            return pd.DataFrame(agg_data)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return pd.DataFrame()
    
    def train_model(self, df):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            self.feature_columns = [
                'Price', 'frame_material', 'frame_shape', 'lens_color', 
                'gender', 'is_polarized', 'has_uv_protection', 'price_segment',
                'launch_season', 'launch_month', 'Segment'
            ]
            
            self.categorical_features = [
                'frame_material', 'frame_shape', 'lens_color', 
                'gender', 'price_segment', 'launch_season', 'Segment'
            ]
            
            X = df[self.feature_columns]
            y = df['sales_30_days']
            
            # –û–±—É—á–µ–Ω–∏–µ CatBoost
            self.model = CatBoostRegressor(
                iterations=100,
                depth=6,
                learning_rate=0.1,
                cat_features=self.categorical_features,
                verbose=False,
                random_seed=42
            )
            
            self.model.fit(X, y)
            return self.model
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
            return None
    
    def predict(self, features_dict):
        """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏"""
        if self.model is None:
            return None
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            df = pd.DataFrame([features_dict])
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            for col in self.feature_columns:
                if col not in df.columns:
                    df[col] = 0 if col in ['is_polarized', 'has_uv_protection'] else '–î—Ä—É–≥–æ–µ'
            
            X = df[self.feature_columns]
            prediction = self.model.predict(X)[0]
            
            return max(0, int(prediction))
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
            return None
    
    def get_feature_importance(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        if self.model is None:
            return None
        
        try:
            importance = self.model.get_feature_importance()
            feature_names = self.feature_columns
            
            return pd.DataFrame({
                'feature': feature_names,
                'importance': importance
            }).sort_values('importance', ascending=False)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {str(e)}")
            return None

def create_metric_card(title, value, delta=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –º–µ—Ç—Ä–∏–∫–æ–π"""
    st.markdown('<div class="metric-card">', unsafe_allow_html=True)
    st.metric(title, value, delta)
    st.markdown('</div>', unsafe_allow_html=True)

def main():
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("""
    <div style='text-align: center; padding: 2rem 0;'>
        <h1 style='color: #667eea; font-size: 3rem; margin-bottom: 0;'>üëì –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –æ—á–∫–æ–≤</h1>
        <p style='color: #764ba2; font-size: 1.2rem;'>–£–º–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞</p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞
    if 'predictor' not in st.session_state:
        st.session_state.predictor = GlassesSalesPredictor()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.markdown("### üìä –ù–∞–≤–∏–≥–∞—Ü–∏—è")
        tab = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
            ["üìà –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏", "üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", "üìã –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏"]
        )
    
    if tab == "üìà –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏":
        st.markdown("### üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        
        # –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
        st.markdown('<div class="upload-section">', unsafe_allow_html=True)
        st.markdown("**–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö**")
        uploaded_file = st.file_uploader(
            "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞",
            type=['csv'],
            help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: Magazin, Datasales, Art, Describe, Model, Segment, Price, Qty, Sum"
        )
        st.markdown('</div>', unsafe_allow_html=True)
        
        if uploaded_file:
            try:
                # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                df = pd.read_csv(uploaded_file)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
                required_cols = ['Magazin', 'Datasales', 'Art', 'Describe', 'Model', 'Segment', 'Price', 'Qty']
                missing_cols = [col for col in required_cols if col not in df.columns]
                
                if missing_cols:
                    st.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing_cols)}")
                    return
                
                st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –°—Ç—Ä–æ–∫: {len(df)}")
                
                # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
                with st.expander("üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö"):
                    st.dataframe(df.head())
                
                # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                if st.button("üöÄ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å", type="primary"):
                    with st.spinner("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å..."):
                        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                        training_data = st.session_state.predictor.prepare_training_data(df)
                        
                        if len(training_data) == 0:
                            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
                            return
                        
                        # –û–±—É—á–µ–Ω–∏–µ
                        model = st.session_state.predictor.train_model(training_data)
                        
                        if model is not None:
                            st.session_state.model_trained = True
                            st.success("üéâ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
                            
                            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                create_metric_card("–ú–æ–¥–µ–ª–µ–π –≤ –æ–±—É—á–µ–Ω–∏–∏", len(training_data))
                            
                            with col2:
                                avg_sales = training_data['sales_30_days'].mean()
                                create_metric_card("–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ 30 –¥–Ω–µ–π", f"{avg_sales:.0f}")
                            
                            with col3:
                                max_sales = training_data['sales_30_days'].max()
                                create_metric_card("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏", f"{max_sales:.0f}")
                
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    
    elif tab == "üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ":
        if not hasattr(st.session_state, 'model_trained') or not st.session_state.model_trained:
            st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏'")
            return
        
        st.markdown("### üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏")
        
        # –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**üí∞ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã**")
            price = st.number_input("–¶–µ–Ω–∞ (—Ä—É–±.)", min_value=500, max_value=50000, value=3000, step=100)
            segment = st.selectbox("–°–µ–≥–º–µ–Ω—Ç", ["–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ", "–û–ø—Ç–∏—á–µ—Å–∫–∏–µ", "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ"])
            
            st.markdown("**üé® –î–∏–∑–∞–π–Ω –æ–ø—Ä–∞–≤—ã**")
            frame_material = st.selectbox("–ú–∞—Ç–µ—Ä–∏–∞–ª –æ–ø—Ä–∞–≤—ã", ["–ú–µ—Ç–∞–ª–ª", "–ü–ª–∞—Å—Ç–∏–∫", "–î–µ—Ä–µ–≤–æ", "–î—Ä—É–≥–æ–µ"])
            frame_shape = st.selectbox("–§–æ—Ä–º–∞ –æ–ø—Ä–∞–≤—ã", ["–ê–≤–∏–∞—Ç–æ—Ä", "–í–∞–π—Ñ–∞—Ä–µ—Ä", "–ö–æ—à–∞—á–∏–π –≥–ª–∞–∑", "–ö—Ä—É–≥–ª—ã–µ", "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ", "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ", "–î—Ä—É–≥–æ–µ"])
        
        with col2:
            st.markdown("**üëÅÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏–Ω–∑**")
            lens_color = st.selectbox("–¶–≤–µ—Ç –ª–∏–Ω–∑", ["–ß–µ—Ä–Ω—ã–π", "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π", "–ó–µ—Ä–∫–∞–ª—å–Ω—ã–π", "–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π", "–°–∏–Ω–∏–π", "–ó–µ–ª–µ–Ω—ã–π", "–î—Ä—É–≥–æ–µ"])
            is_polarized = st.checkbox("üåü –ü–æ–ª—è—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –ª–∏–Ω–∑—ã")
            has_uv_protection = st.checkbox("‚òÄÔ∏è UV –∑–∞—â–∏—Ç–∞")
            
            st.markdown("**üë§ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è**")
            gender = st.selectbox("–ü–æ–ª", ["–ú—É–∂—Å–∫–∏–µ", "–ñ–µ–Ω—Å–∫–∏–µ", "–£–Ω–∏—Å–µ–∫—Å"])
            launch_month = st.selectbox("–ú–µ—Å—è—Ü –∑–∞–ø—É—Å–∫–∞", list(range(1, 13)), format_func=lambda x: f"{x} –º–µ—Å—è—Ü")
        
        # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        if st.button("üîç –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", type="primary"):
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            features = {
                'Price': price,
                'frame_material': frame_material,
                'frame_shape': frame_shape,
                'lens_color': lens_color,
                'gender': gender,
                'is_polarized': 1 if is_polarized else 0,
                'has_uv_protection': 1 if has_uv_protection else 0,
                'price_segment': st.session_state.predictor.create_price_segment(price),
                'launch_season': st.session_state.predictor.get_season(datetime(2023, launch_month, 1)),
                'launch_month': launch_month,
                'Segment': segment
            }
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
            prediction = st.session_state.predictor.predict(features)
            
            if prediction is not None:
                # –†–µ–∑—É–ª—å—Ç–∞—Ç
                st.markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞")
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    create_metric_card("–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –∑–∞ 30 –¥–Ω–µ–π", f"{prediction} —à—Ç.")
                
                with col2:
                    revenue = prediction * price
                    create_metric_card("–û–∂–∏–¥–∞–µ–º–∞—è –≤—ã—Ä—É—á–∫–∞", f"{revenue:,.0f} —Ä—É–±.")
                
                with col3:
                    if prediction < 30:
                        recommendation = "üî¥ –ù–∏–∑–∫–∏–π —Å–ø—Ä–æ—Å"
                    elif prediction < 100:
                        recommendation = "üü° –°—Ä–µ–¥–Ω–∏–π —Å–ø—Ä–æ—Å"
                    else:
                        recommendation = "üü¢ –í—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å"
                    create_metric_card("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è", recommendation)
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                st.markdown("### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–∫—É–ø–∫–µ")
                if prediction < 30:
                    st.info("üìâ –ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–∞–±—ã–µ –ø—Ä–æ–¥–∞–∂–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–∫—É–ø–∫–∞.")
                elif prediction < 100:
                    st.success("üìà –ú–æ–¥–µ–ª—å –∏–º–µ–µ—Ç —Å—Ä–µ–¥–Ω–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∑–∞–∫—É–ø–∫–∞.")
                else:
                    st.success("üöÄ –ú–æ–¥–µ–ª—å –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–∫—É–ø–∫–∞.")
    
    elif tab == "üìã –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏":
        if not hasattr(st.session_state, 'model_trained') or not st.session_state.model_trained:
            st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏'")
            return
        
        st.markdown("### üìä –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        importance_df = st.session_state.predictor.get_feature_importance()
        
        if importance_df is not None:
            # –ì—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏
            fig = px.bar(
                importance_df.head(10),
                x='importance',
                y='feature',
                orientation='h',
                title="–¢–æ–ø-10 –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
                color='importance',
                color_continuous_scale='Viridis'
            )
            fig.update_layout(
                height=500,
                yaxis={'categoryorder': 'total ascending'}
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # –¢–∞–±–ª–∏—Ü–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏
            st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏")
            st.dataframe(
                importance_df.style.format({'importance': '{:.2f}'}),
                use_container_width=True
            )
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown(
        "<div style='text-align: center; color: #666; padding: 1rem;'>"
        "üíú –°–æ–∑–¥–∞–Ω–æ —Å –ª—é–±–æ–≤—å—é –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞"
        "</div>",
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()
